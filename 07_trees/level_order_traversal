from typing import Optional
from collections import deque

class TreeNode:
  def __init__(self, val=0, left=None, right=None) -> None:
    self.val = val
    self.left = left
    self.right = right

class Solution:
  def levelOrder(self, root: Optional[TreeNode]):
    #Level order > BFS
    #list of list of nodes

    #base case
    if not root: return []
    q = deque()
    q.append(root)

    res = []

    while q:
      level = [] #values of all nodes in the same level

      #iterate through nodes at the same level
      for _ in range(len(q)):
        n = q.popleft()
        level.append(n.val)

        if n.left:
          q.append(n.left)
        if n.right:
          q.append(n.right)
      
      res.append(level)

    return res

